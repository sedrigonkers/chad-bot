const TelegramBot = require('node-telegram-bot-api')
const { getFirestore, collection, getDocs, doc } = require("firebase/firestore")

const { db } = require('./firebase')

// async function getCollection() {
//   const querySnapshot = await getDocs(collection(db, "motivation"));

//   querySnapshot.forEach((doc) => {
//     // console.log(`${doc.id} => ${doc.data().firstPhrase}`);
//     return doc.data().firstPhrase
//   });
// }

// getCollection()

const token = '5646501975:AAFZ37NppJplu4Ckgsk8iBs22gNNP-jVNDY'
const adminId = '444198069'
const userList = [
  '444198069',
  '675207271',
]

const bot = new TelegramBot(token, { polling: true });

const greetingText = `
<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è, –¥—Ä—É–∂–∏—â–µ! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–ª—É–±.</b>ü§úü§õ

–ó–¥–µ—Å—å –º—ã –∂–µ—Å—Ç–∫–æ –≥—Ä–∏–Ω–¥–∏–º, —á—Ç–æ–±—ã c—Ç–∞—Ç—å _–ª—É—á—à–µ–π –≤–µ—Ä—Å–∏–µ–π —Å–µ–±—è. –£ –≤—Å–µ—Ö –Ω–∞—Å —Å–≤–æ–∏ –ø—Ä–∏—á–∏–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ, –∏ —Ä–∞–∑–Ω—ã–µ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏, –Ω–æ –Ω–∞—Å –æ–±—ä–µ–¥–µ–Ω—è–µ—Ç –æ–¥–Ω–æ - <i>–∂–µ–ª–∞–µ–Ω–∏–µ —Å—Ç–∞—Ç—å –ª—É—á—à–µ</i> üî•. <b>–¢—ã - –±–æ–ª—å—à–æ–π –º–æ–ª–æ–¥–µ—Ü</b>, –µ—Å–ª–∏ –Ω–∞—à–µ–ª —ç—Ç–æ–≥–æ –±–æ—Ç–∞. –ú—ã –±—É–¥–µ–º –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –Ω–µ —Å–±–∏—Ç—å—Å—è –Ω–∞ —ç—Ç–æ–º –¥–ª–∏–Ω–Ω–æ–º –ø—É—Ç–∏ üí™

<b>–ù—É, –≥–æ—Ç–æ–≤?</b>
`

bot.onText(/\/start/, msg => {
  bot.sendMessage(msg.chat.id, greetingText, { parse_mode: 'HTML' })
})

bot.onText(/\/motivation/, async (msg) => {

  const chatId = msg.chat.id;

  try {
    getDocs(collection(db, "motivation"))
      .then(res => {
        res.forEach((doc) => {
          bot.sendMessage(chatId, JSON.stringify(doc.data()))
        })
      })
  } catch (err) {
    bot.sendMessage(chatId, err)
  }
});

function sendMessageToAllUsers(text) {
  return new Promise((res, rej) => {
    for (user of userList) {
      bot.sendMessage(user, text)
    }
    res()
  })
}

function sendSuggestToAdmin(msg) {
  bot.sendMessage(adminId, `–ù–æ–≤–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ—Ç <b>@${msg.from.username}</b>:\n\n<i>"${msg.text}"</i>`,
    {
      "parse_mode": 'HTML',
      "one_time_keyboard": true,
      "reply_markup": {
        "inline_keyboard": [
          [
            {
              text: '–ü—Ä–∏–Ω—è—Ç—å',
              callback_data: 'accept'
            }
          ], [
            {
              text: '–û—Ç–∫–ª–æ–Ω–∏—Ç—å',
              callback_data: 'decline'
            }
          ],
        ]
      }
    })
  currentPost = msg.text
}

bot.sendChatAction()

let currentPost = ''

bot.on('callback_query', (ctx) => {
  switch (ctx.data) {
    case 'accept':
      sendMessageToAllUsers(currentPost)
      break
    case 'decline':
      break
  }
})

bot.onText(/\/callbackquery/, (msg) => {
  bot.sendMessage(msg.chat.id, "Click a button won't you!", {
    "reply_markup": {
      "inline_keyboard": [
        [
          {
            text: "Click me!",
            callback_data: "click",
          },
        ],
      ],
    },
  });
});

bot.onText(/\/suggest/, (message) => {

  const chatId = message.chat.id

  bot.sendMessage(chatId, '–ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–æ—á—å –¥—Ä—É–≥–∏–º —Ä–µ–±—è—Ç–∞–º, –ø—Ä–∏—à–ª–∏ —Å–≤–æ–π —Ç–µ–∫—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏')

  bot.on('message', (msg) => {

    const chatId = msg.chat.id

    if (msg.message_id != message.message_id + 2) return

    sendSuggestToAdmin(msg)

    bot.sendMessage(chatId, '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–π –≤–∫–ª–∞–¥, –¥—Ä—É–∂–∏—â–µ! –Ø –æ—Ç–ø—Ä–∞–≤–ª—é —Ç–≤–æ—ë –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.')
  })
  return
}
)

bot.onText(/\/post/, (message) => {

  const chatId = message.chat.id
  if (chatId.toString() !== adminId) bot.sendMessage(chatId, `–¢—ã –º–æ–∂–µ—à—å –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ—é –∏–¥–µ—é. –î–ª—è —ç—Ç–æ–≥–æ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É \/suggest`)

  bot.sendMessage(adminId, '–û—Ç–ø—Ä–∞–≤—å –ø–æ—Å—Ç –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏')

  bot.on('message', (msg) => {
    if (msg.message_id != message.message_id + 2) return

    sendMessageToAllUsers(msg.text)
    .then(() => bot.sendMessage(adminId, '–ü–æ—Å—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω'))
  })


})

bot.on('edited_message', (msg) => {

  const chatId = msg.chat.id;

  bot.sendMessage(chatId, '—è –≤—Å–µ –≤–∏–¥–µ–ª')
})

// bot.on('message', (msg) => {
//   bot.sendMessage(msg.chat.id, "–°–∫–æ—Ä–µ–µ –≤—Å–µ–≥–æ, —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", {
//     keyboard: {}
//   })
// })